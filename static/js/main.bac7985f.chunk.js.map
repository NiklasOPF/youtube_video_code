{"version":3,"sources":["components/Task.jsx","components/AddTask.jsx","components/Column.jsx","components/AddColumn.jsx","components/Board.jsx","components/Login.jsx","components/Register.jsx","index.js"],"names":["Container","styled","div","Task","props","draggableId","task","id","index","provided","draggableProps","dragHandleProps","ref","innerRef","content","onClick","columnId","taskId","column","state","columns","newTaskIds","Array","from","taskIds","splice","tasks","newTasks","setState","deleteTask","AddTask","useState","showNewTaskButton","setShowNewTaskButton","value","setValue","type","onChange","event","target","onBlur","newTaskId","Math","floor","random","push","newTask","addNewTask","Title","h3","TaskList","Column","title","finalTasks","reduce","previousValue","currentValue","newColumns","newColumnOrder","columnOrder","deleteColumn","droppableId","droppableProps","map","placeholder","AddColumn","showNewColumnButton","setShowNewColumnButton","newColumnId","newColumn","addNewColumn","Board","initialData","a","fetch","method","headers","token","body","JSON","stringify","response","json","data","board","useEffect","fetchBoard","then","saveBoard","onDragEnd","result","destination","source","start","finish","startTaskIds","newStart","finishTaskIds","newFinish","direction","Login","username","setUsername","password","setPassword","history","useHistory","searchParams","URLSearchParams","append","toString","onSubmit","e","preventDefault","loginUser","setToken","access_token","localStorage","setItem","Register","formData","password_hash","createUser","App","tokenString","getItem","parse","getToken","exact","path","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bac7985f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  padding: 8px;\n  margin-bottom: 8px;\n  background-color: white;\n`;\n\nfunction Task(props) {\n\n    function deleteTask(columnId, index, taskId) {\n        const column = props.state.columns[columnId];\n        const newTaskIds = Array.from(column.taskIds);\n        newTaskIds.splice(index, 1);\n    \n        const tasks = props.state.tasks;\n        const {[taskId]: oldTask, ...newTasks} = tasks;\n    \n        props.setState({\n            ...props.state,\n            tasks: {\n                ...newTasks\n            },\n            columns: {\n                ...props.state.columns,\n                [columnId]: {\n                    ...column,\n                    taskIds: newTaskIds\n                }\n            }\n        });\n    }\n\n    return (\n        <Draggable draggableId={props.task.id} index={props.index}>\n            {provided => (\n                <Container {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\n                    {props.task.content}\n                    <span onClick={() => deleteTask(props.columnId, props.index, props.task.id)}> X</span>\n                </Container>\n            )}\n        </Draggable>\n    )\n}\n\nexport default Task;","import React, { useState } from 'react';\n\nfunction AddTask(props) {\n    const [showNewTaskButton, setShowNewTaskButton] = useState(true);\n    const [value, setValue] = useState(\"\");\n\n    function onNewTaskButtonClick() {\n        setShowNewTaskButton(false);\n    }\n\n    function handleInputChange(event) {\n        setValue(event.target.value);\n    }\n\n    function onNewTaskInputComplete() {\n        setShowNewTaskButton(true);\n        addNewTask(props.columnId, value);\n        setValue(\"\");\n    }\n\n    function addNewTask(columnId, content) {\n        const newTaskId = 'task-' + Math.floor(Math.random() * 100000);\n    \n        const column = props.state.columns[columnId];\n        const newTaskIds = Array.from(column.taskIds);\n        newTaskIds.push(newTaskId);\n    \n        const newTask = {\n            id: newTaskId,\n            content: content,\n        }\n    \n        props.setState({...props.state,\n            tasks: {\n                ...props.state.tasks,\n                [newTaskId]: newTask\n            },\n            columns: {\n                ...props.state.columns,\n                [columnId]: {\n                    ...props.state.columns[columnId],\n                    taskIds: newTaskIds\n                }\n            }\n        });\n    }\n\n    return (\n        <div>\n            {\n                showNewTaskButton ?\n                <button onClick={onNewTaskButtonClick}>New</button>:\n                <input type=\"text\" value={value} onChange={handleInputChange} onBlur={onNewTaskInputComplete} />\n            }\n        </div>\n    )\n}\n\nexport default AddTask;","import React from 'react';\nimport styled from 'styled-components';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './Task';\nimport AddTask from './AddTask';\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  width: 200px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-bottom: 10px;\n`;\nconst Title = styled.h3`\n  padding: 8px;\n`;\n\nconst TaskList = styled.div`\n  padding: 8px;\n`;\n\nfunction Column(props) {\n\n    function deleteColumn(columnId, index) {\n        const columnTasks = props.state.columns[columnId].taskIds;\n    \n        const finalTasks = columnTasks.reduce((previousValue, currentValue) => {\n            const {[currentValue]: oldTask, ...newTasks} = previousValue;\n            return newTasks;\n        }, props.state.tasks);\n        \n        const columns = props.state.columns;\n        const {[columnId]: oldColumn, ...newColumns} = columns; \n    \n        const newColumnOrder = Array.from(props.state.columnOrder);\n        newColumnOrder.splice(index, 1);\n    \n        props.setState({\n            tasks: {\n                ...finalTasks\n            },\n            columns: {\n                ...newColumns\n            },\n            columnOrder: newColumnOrder\n        });\n    }\n\n    return (\n        <Draggable draggableId={props.column.id} index={props.index}>\n            {provided => (\n                <Container {...provided.draggableProps} ref={provided.innerRef}>\n                    <Title {...provided.dragHandleProps}>\n                        {props.column.title}\n                        <span onClick={() => deleteColumn(props.column.id, props.index)}> X</span>\n                    </Title>\n                    <Droppable droppableId={props.column.id} type=\"task\">\n                        {provided => (\n                            <TaskList {...provided.droppableProps} ref={provided.innerRef}>\n                                {\n                                    props.tasks.map((task, index) => \n                                        (<Task key={task.id} task={task} index={index} columnId={props.column.id} state={props.state} setState={props.setState} />)\n                                    )\n                                }\n                                {provided.placeholder}\n                            </TaskList>\n                        )}\n                    </Droppable>\n                    <AddTask columnId={props.column.id} state={props.state} setState={props.setState} />\n                </Container>\n            )}\n        </Draggable>\n    )\n}\n\nexport default Column;","import React, { useState } from \"react\";\n\nfunction AddColumn(props) {\n    const [showNewColumnButton, setShowNewColumnButton] = useState(true);\n    const [value, setValue] = useState(\"\");\n\n    function handleInputChange(event) {\n        setValue(event.target.value);\n    }\n\n    function onNewColumnButtonClick() {\n        setShowNewColumnButton(false);\n    }\n\n    function onNewColumnInputComplete() {\n        setShowNewColumnButton(true);\n        addNewColumn(value);\n        setValue(\"\");\n    }\n\n    function addNewColumn(title) {\n        const newColumnOrder = Array.from(props.state.columnOrder);\n        const newColumnId = 'column-' + Math.floor(Math.random() * 100000);\n        newColumnOrder.push(newColumnId);\n    \n        const newColumn = {\n            id: newColumnId,\n            title: title,\n            taskIds: [],\n        };\n    \n        props.setState({\n            ...props.state,\n            columnOrder: newColumnOrder,\n            columns: {\n                ...props.state.columns,\n                [newColumnId]: newColumn\n            }\n        });\n    }\n\n    return (\n        <div>\n            {\n                showNewColumnButton ?\n                <button onClick={onNewColumnButtonClick}>New Column</button> :\n                <input type=\"text\" value={value} onChange={handleInputChange} onBlur={onNewColumnInputComplete} />\n            }\n        </div>\n    )\n}\n\nexport default AddColumn;","import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport Column from './Column';\nimport AddColumn from './AddColumn';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nfunction Board(props) {\n    const initialData = {tasks: {}, columns: {}, columnOrder: []};\n    const [state, setState] = useState(initialData);\n\n    useEffect(() => {\n        fetchBoard().then(board => setState(board));\n    }, [props.token]);\n\n    useEffect(() => {\n        if (state !== initialData) {\n            saveBoard();\n        }\n    }, [state]);\n\n    async function saveBoard() {\n        const response = await fetch(\"/board\", {\n            method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    \"Authorization\" : \"Bearer \" + props.token\n                },\n            body: JSON.stringify(state)\n        });\n        const data = await response.json();\n    }\n\n    async function fetchBoard() {\n        const response = await fetch('/board', {headers: {\"Authorization\" : \"Bearer \" + props.token}});\n        const data = await response.json();\n        return data.board;\n    }\n\n    function onDragEnd(result) {\n        const { destination, source, draggableId, type } = result;\n\n        if (!destination) {\n            return;\n        }\n        \n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n        if (type === 'column') {\n            const newColumnOrder = Array.from(state.columnOrder);\n            newColumnOrder.splice(source.index, 1);\n            newColumnOrder.splice(destination.index, 0, draggableId);\n      \n            setState({\n                ...state,\n                columnOrder: newColumnOrder,\n            });\n            return;\n        }\n\n        const start = state.columns[source.droppableId]; \n        const finish = state.columns[destination.droppableId]; \n\n        if (start === finish) {\n            const newTaskIds = Array.from(start.taskIds);\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n      \n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds,\n            }\n      \n            setState({...state, \n                columns: {\n                ...state.columns,\n                [newColumn.id]: newColumn}\n            });\n            return;\n        }\n\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds,\n        }\n    \n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds,\n        }\n    \n        setState({...state, \n            columns: {\n                ...state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish,\n            }\n        });\n    }\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <AddColumn state={state} setState={setState} />\n            <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n                {provided => (\n                    <Container {...provided.droppableProps} ref={provided.innerRef}>\n                        {\n                            state.columnOrder.map((columnId, index) => {\n                                const column = state.columns[columnId];\n                                const tasks = column.taskIds.map(taskId => state.tasks[taskId]);\n                                return <Column key={column.id} column={column} tasks={tasks} index={index} state={state} setState={setState} />;\n                            })\n                        }\n                        {provided.placeholder}\n                    </Container>\n                )}\n            </Droppable>\n        </DragDropContext>\n    )\n}\n\nexport default Board;","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nfunction Login(props) {\n    const [username, setUsername] = useState();\n    const [password, setPassword] = useState();\n    const history = useHistory();\n\n    async function loginUser() {\n        const searchParams = new URLSearchParams();\n        searchParams.append('username', username);\n        searchParams.append('password', password);\n\n        const response = await fetch('/token', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: searchParams.toString()\n        });\n        const data = await response.json();\n\n        return data;\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        \n        loginUser().then(data => {\n            props.setToken(data.access_token);\n            localStorage.setItem('token', JSON.stringify(data.access_token));\n            history.push(\"/\");\n        });\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <p>Username: <input type=\"text\" onChange={e => setUsername(e.target.value)} /></p> \n                <p>Password: <input type=\"password\" onChange={e => setPassword(e.target.value)} /></p>\n                <p><button>Login</button></p>\n            </form>\n        </div>\n    )\n}\n\nexport default Login;","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nfunction Register(props) {\n    const [username, setUsername] = useState();\n    const [password, setPassword] = useState();\n    const history = useHistory();\n\n    async function createUser() {\n        const formData = {\n            username: username,\n            password_hash: password,\n        }\n\n        const response = await fetch('/users', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(formData)\n        });\n        const data = await response.json();\n\n        return data;\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        \n        createUser().then(data => {\n            props.setToken(data.access_token);\n            localStorage.setItem('token', JSON.stringify(data.access_token));\n            history.push(\"/\");\n        });\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                Username <input type=\"text\" onChange={e => setUsername(e.target.value)} />\n                Password <input type=\"password\" onChange={e => setPassword(e.target.value)} /> \n                <button>Register</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Register;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport Board from './components/Board';\nimport Login from './components/Login';\nimport Register from './components/Register';\n\nfunction getToken() {\n  const tokenString = localStorage.getItem('token');\n  const userToken = JSON.parse(tokenString);\n  return userToken\n}\n\nfunction App() {\n  const [token, setToken] = useState(() => getToken());\n\n  return (\n    <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\">\n        {!token ? <Redirect to=\"/login\" /> :\n        <Board token={token} />\n      }\n      </Route>\n      <Route path=\"/login\">\n          <Login setToken={setToken} />\n      </Route>\n      <Route path=\"/register\">\n          <Register setToken={setToken} />\n      </Route>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}